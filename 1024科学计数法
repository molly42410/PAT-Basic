科学计数法是科学家用来表示很大或很小的数字的一种方便的方法，其满足正则表达式 [+-][1-9].[0-9]+E[+-][0-9]+，即数字的整数部分只有 1 位，小数部分至少有 1 位，该数字及其指数部分的正负号即使对正数也必定明确给出。

现以科学计数法的格式给出实数 A，请编写程序按普通数字表示法输出 A，并保证所有有效位都被保留。

输入格式：
每个输入包含 1 个测试用例，即一个以科学计数法表示的实数 A。该数字的存储长度不超过 9999 字节，且其指数的绝对值不超过 9999。

输出格式：
对每个测试用例，在一行中按普通数字表示法输出 A，并保证所有有效位都被保留，包括末尾的 0。

输入样例 1：
+1.23400E-03
输出样例 1：
0.00123400
输入样例 2：
-1.2E+10
输出样例 2：
-12000000000

下面为我自己一开始写的代码：
#include<stdio.h>
int main(){
	char num[9999];
	int i,locate;
	int index;
	int zhishu=0;
	gets(num);
	if(num[0]=='-')printf("-");
	for(i=1;num[i]!='\0';i++){
		if(num[i]=='E') locate=i;
		
	}
	for(i=locate+2;num[i]!='\0';i++){
		zhishu=zhishu*10+num[i]-'0';//num[i]-'0'
	}
	if(num[locate+1]=='+'){
		for(i=1;i<=zhishu+2&&num[i];i++){
			if(num[i]!='.')printf("%d",num[i]-'0');//num[i]-'0'
		}
		index=zhishu+2-i;
		if(num[i]){
			putchar('.');
			for(i=zhishu+3;num[i];i++)printf("%d",num[i]-'0');
		}
		else for(i=0;i<index;i++)printf("0");
	}
	else if(num[locate+1]=='-'){
		printf("0.");
		for(i=0;i<zhishu-1;i++)printf("0");
		for(i=1;i<locate;i++){
			if(num[i]!='.')printf("%d",num[i]-'0');//num[i]-'0'		
	}
}
	return 0;
}

下面是正确代码：
#include <stdio.h>
int main()
{
    int exponent;    /* the exponent part */
    char line[10000], *p = line;
    scanf("%[^E]E%d", line, &exponent);
 
    if(*p++ == '-') putchar('-');
    if(exponent >= 0)   /* print '.' later or add zeros in the end */
    {
        putchar(*p);
        for(p += 2; exponent; exponent--)    /* print the integer part */
            putchar(*p ? *p++ : '0');
        if(*p)                               /* there is still fraction part */
        {
            putchar('.');
            while(*p) 
                putchar(*p++);
        }
    }
    if(exponent < 0)    /* add exponent zeros in the beginning */
    {
        printf("0.");
        for(exponent++; exponent; exponent++)       /* add zeros */
            putchar('0');
        for(; *p; p++) if(*p != '.') putchar(*p);   /* the rest */
    }
 
    return 0;
}


1.读取的时候用到了一种格式化字符串%[^...]，这和%s类似，不过会终止于[^]里面的字符，而不是空白字符，利用这个可以简单的读取'E'前后的两个数。
2.考虑三种情况：

指数大于（等于）0，
    指数大于（等于）小数位数，末尾补0，不输出小数点，
    指数小于小数位数，要在中间输出小数点，
指数小于0，在前面补0，小数点前移至第一个0后面。
